<?php
/**
 * @author Izzat <i.rakhmatov@list.ru>
 * @package gastrotourism.uz
 */

namespace common\modules\restaurant\widgets;


use common\modules\restaurant\assets\RestaurantFoodsAsset;
use common\modules\restaurant\models\Food;
use common\modules\restaurant\models\search\FoodSearch;
use yii\base\InvalidConfigException;
use yii\bootstrap\BootstrapPluginAsset;
use yii\bootstrap\Html;
use yii\jui\InputWidget;

class RestaurantFoods extends InputWidget {

    public $attribute = '';

    /**
     * @var string
     */
    public $form;

    /**
     * @var bool
     */
    public $multiple = true;

    /**
     * @var string
     */
    public $relation_name = "foods";

    /**
     * @var string
     */
    public $via_relation_name = "restaurantFoods";

    /**
     * @var
     */
    public $model_db;

    /**
     * @var string
     */
    public $delimitr = ',';

    /**
     * @var string
     */
    public $food_create_url = '/restaurant/food/create';

    /**
     * @var string
     */
    public $detail_view_url = '/restaurant/food/detail';

    /**
     * @var string
     */
    public $detail_update_url = '/restaurant/food/update-detail';

    /**
     * @var string
     */
    public $food_delete_url = '/restaurant/food/delete-food';

    /**
     * @var array
     */
    private $selected = [];

    /**
     * @var array
     */
    private $selected_items_sortable = [];

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        RestaurantFoodsAsset::register(\Yii::$app->view);

        if (empty($this->attribute)) {
            throw new InvalidConfigException('"attribute" cannot be empty.');
        }

        $script =  <<<JS
		
			var filemanager = function()
			{
				var self = this;
				this.self_block    = '#filemanager-{$this->id}';
				this.item          = '.filemanager-item';
				this.item_detail   = 'filemanager-item-detail';
				this.item_name     = '.filemanager-item-name',
				this.all_items     = '.food-items';
				this.selected_item = 'selected-item';
				this.file_input    = '.filemanager-file-input';
				this.add_btn       = '.filemanager-add-btn';
				this.modal         = '#filemanager-modal-{$this->id}';
				this.modal_sidebar = '.modal-sidebar';
				this.item_detail_block = '.filemanager-item-detail-block';
				this.item_image    = 'filemanager-item-image';
				this.item_saved    = '.filemanager-item-saved';
				this.item_settings = '.filemanager-item-settings';
				this.items_delete_all = '.delete-selected-all';
				this.sortable      = '.sortable';
				this.foods_sortable_item = '.filemanager-sortable-item';
				this.foods_sortable_item_remove = '.filemanager-sortable-item-remove';
				this.delimiter     = ',';
				this.selected      = [];
				this.multiple      = Number({$this->multiple});
				
				this.checkItem = function(food_id, food_title, food_img) 
				{
                    item_image = 'filemanager-sortable-item-image';
						
					if(self.multiple){
						if(self.selected.includes(food_id)) {  
							self.selected.splice(self.selected.indexOf(food_id), 1);
							$(self.self_block + ' ' + self.sortable + ' li[data-key="' + food_id + '"]').remove();
							return true;
						} else {
							self.selected.push(food_id);
							$(self.self_block + ' ' + self.sortable).append('<li data-key="' + food_id + '" draggable="true"><div data-id="' + food_id + '" class="filemanager-sortable-item ' + item_image + '"><img src="' + food_img + '"/><i class="filemanager-sortable-item-icon glyphicon glyphicon-file"></i><span class="filemanager-sortable-item-name">' + food_title + '</span><span class="filemanager-sortable-item-remove"><i class="glyphicon glyphicon-remove"></i></span></div></li>');
							
							return false;
						}
					} else {
						self.selected = [];
						$(self.self_block + ' ' + self.sortable + ' li').remove();
						
						$(self.self_block + ' ' + self.sortable).append('<li data-key="' + food_id + '" draggable="true"><div data-id="' + food_id + '" class="filemanager-sortable-item ' + item_image + '"><img src="' + food_img + '"/><i class="filemanager-sortable-item-icon glyphicon glyphicon-file"></i><span class="filemanager-sortable-item-name">' + food_title + '</span><span class="filemanager-sortable-item-remove"><i class="glyphicon glyphicon-remove"></i></span></div></li>');
						
						self.selected.push(foods_id);
						return false;
					}
				};
				
				this.deleteItem = function(item) {
					var food_id = $(item).closest(self.foods_sortable_item).data('id');
				  	self.selected.splice(self.selected.indexOf(food_id), 1);
					$(self.self_block + ' ' + self.sortable + ' li[data-key="' + food_id + '"]').remove();
					self.addToInput();
					return true;
				};
				
				this.checkItems = function() 
				{
					if(self.selected.length > 0) 
						$(self.self_block + ' ' + self.item + '[data-id="' + self.selected[self.selected.length - 1] + '"]').addClass(self.item_detail);
					$(self.self_block + ' ' + self.all_items + ' ' + self.item).each(function() {
						if(self.selected.includes($(this).data('id'))){
							$(this).addClass(self.selected_item);
						} else {
							$(this).removeClass(self.selected_item);
						}
					});
					self.showDetails();
				};
				
				this.showDetails = function() 
				{
					var selected_item = $(self.self_block + ' .' + self.item_detail);
					var item_detail = $(self.self_block + ' ' + self.item_detail_block);
					if(selected_item.length > 0){
						var food_id = selected_item.data('id');
						if(food_id > 0){
							item_detail.show();
							item_detail.attr('data-id', food_id);
					
							item_detail.closest(self.modal_sidebar).addClass('loading-data');
							
							item_detail.find('.food-url input').val('');
							item_detail.find('.thumbnail img').attr('src', '');
							item_detail.find('.food-url input').val('');
							item_detail.find('.food-title input').val('');
							
							$.ajax({
								url: "{$this->detail_view_url}?food_id=" + food_id,
								type: 'GET',
								success: function(response) 
								{
                                    item_detail.find('.thumbnail img').attr('src', response.thumb_url);
                                    item_detail.addClass(self.item_image);
									
									item_detail.find('.food-url input').val(response.url);
									item_detail.find('.food-title input').val(response.title);
									
									item_detail.closest(self.modal_sidebar).removeClass('loading-data');
								},
								error: function(e) 
								{
									item_detail.closest(self.modal_sidebar).removeClass('loading-data');
								}
							});
						}
					} else {
						item_detail.hide();
						$(self.self_block + ' ' + self.item_detail_block).attr('data-id', '');
					}
				};
				
				this.updateDetails = function(item_detail) 
				{
					var item_detail = $(self.self_block + ' ' + self.item_detail_block);
					var title = item_detail.find('.food-title input').val();
					if(self.selected.length == 0) return false;
					var food_id = self.selected[self.selected.length - 1];
					if(food_id > 0){
						item_detail.find(self.item_saved).hide();
						item_detail.closest(self.modal_sidebar).addClass('loading-data');
						$.ajax({
							url: '{$this->detail_update_url}?food_id=' + food_id,
							type: 'POST',
							data: {
								Foods: {
									title: title,
								}
							},
							success: function(response) 
							{
								if(response.success == true){
									item_detail.find(self.item_saved).show();
									setTimeout(function() {
										item_detail.find(self.item_saved).hide();
									}, 3000);
								}
								$(self.self_block + ' ' + self.all_items + ' ' + self.item + '[data-id="' + food_id + '"] ' + self.item_name).text(response.title);
								item_detail.closest(self.modal_sidebar).removeClass('loading-data');
							},
							error: function(e) 
							{
								item_detail.closest(self.modal_sidebar).removeClass('loading-data');
							}
						});
					}
				};
				
				this.deleteFood = function(item_detail) 
				{
					var item_detail = $(self.self_block + ' ' + self.item_detail_block);
					if(!confirm("Are you sure?")){return false;}
					if(self.selected.length == 0) return false;
					var food_id = self.selected[self.selected.length - 1];
					if(food_id > 0){
						item_detail.find(self.item_saved).hide();
						item_detail.closest(self.modal_sidebar).addClass('loading-data');
						$.ajax({
							url: '{$this->food_delete_url}/' + food_id,
							type: 'POST',
							success: function(response) 
							{
								var item = $(self.self_block + ' ' + self.all_items + ' ' + self.item + '[data-id="' + food_id + '"] ');
								var sortableitem = $(self.self_block + ' ' + self.foods_sortable_item + '[data-id="' + food_id + '"] ');
								item.remove();
								item_detail.closest(self.modal_sidebar).removeClass('loading-data');
								self.selected = [];
								self.deleteItem(sortableitem);
								self.addToInput();
								self.checkItems();
							},
							error: function(e) 
							{
								item_detail.closest(self.modal_sidebar).removeClass('loading-data');
							}
						});
					}
				};
				
				this.deleteAll = function() {
					var selecteds = self.selected;
					if(selecteds.length > 0){
						selecteds.forEach(function(selected){
							$.ajax({
								url: '{$this->food_delete_url}/' + selected,
								type: 'POST',
								success: function(response) 
								{
									var item = $(self.self_block + ' ' + self.all_items + ' ' + self.item + '[data-id="' + selected + '"] ');
									var sortableitem = $(self.self_block + ' ' + '.sortable [data-key="' + selected + '"] ');
									sortableitem.remove();
									item.remove();
									item_detail.closest(self.modal_sidebar).removeClass('loading-data');
									self.selected = [];
									self.deleteItem(sortableitem);
									self.addToInput();
									self.checkItems();
								},
								error: function(e) 
								{
									item_detail.closest(self.modal_sidebar).removeClass('loading-data');
								}
							});
						})
					}
				};
				
				this.addToInput = function() 
				{
					$(self.self_block + ' ' + self.file_input).val(self.selected.join());
				};
				
				this.addUploadedFoodToInput = function(selected) 
				{
					var selectedItem = $(self.self_block + ' ' + self.all_items).find(self.item + '[data-id="' + selected + '"]');
					var food_id = selectedItem.data('id');
					var food_title = selectedItem.data('title');
					var food_img = selectedItem.data('image');
					self.checkItem(food_id, food_title, food_img);
					self.addToInput();
					self.checkItems();
					$(self.self_block + ' ' + self.modal).modal('hide');
				};
				
				this.getInputVal = function() 
				{
					var selected = $(self.self_block + ' ' + self.file_input).val();
					if(selected.length > 0){
						self.selected = selected.split(self.delimiter);
						self.selected = self.selected.map(Number);
					}
				};
				
				this.init = function()
				{
					self.getInputVal();
					
					$(document).on('click', self.self_block + ' ' + self.foods_sortable_item_remove,  function() {
						if(!confirm("Are you sure?")){return false;}
						self.deleteItem(this);
					});
					
					$(document).on('click', self.self_block + ' ' + self.item, function(e) {
						$(this).closest(self.all_items).find(self.item).removeClass(self.item_detail);
						var food_id = $(this).data('id');
						var food_title = $(this).data('title');
						var food_img = $(this).data('image');
						if(self.checkItem(food_id, food_title, food_img)){
							$(this).removeClass(self.selected_item);
							if(self.selected.length > 0) 
								$(this).closest(self.all_items).find(self.item + '[data-id="' + self.selected[self.selected.length - 1] + '"]').addClass(self.item_detail);
						} else {
							$(this).addClass(self.selected_item).addClass(self.item_detail);
						}
						if(self.multiple == 0){
							$(this).closest(self.all_items).find(self.item).not(this).removeClass(self.selected_item);
						}
						self.addToInput();

						if(self.selected.length === 0){
							$(self.self_block).find(self.add_btn).attr('disabled', true);
						} else {
							$(self.self_block).find(self.add_btn).attr('disabled', false);
						}
						self.showDetails();
					});
					
					$(document).on('click', self.self_block + ' ' + self.add_btn, function() {
						self.addToInput();
						$(self.modal).modal('hide');
					});
					$(document).on('click', self.self_block + ' ' + self.item_settings + ' .food-update', function(e) {
						e.preventDefault();
						self.updateDetails();
					});
					$(document).on('click', self.self_block + ' ' + self.item_settings + ' .food-delete', function(e) {
						e.preventDefault();
						self.deleteFood();
					});
					$(self.self_block + ' ' + self.modal).on('hide.bs.modal', function (e) {
						self.getInputVal();
						self.checkItems();
					});
					$(self.self_block + ' ' + self.modal).on('show.bs.modal', function (e) {
						self.getInputVal();
						self.checkItems();
						$.pjax.reload({container: '#filemanager-pjax-modal-{$this->id}',timeout: false});
					});
					$(self.self_block + ' ' + self.items_delete_all).on('click', function (e) {
						self.getInputVal();
						self.deleteAll();
					});
				};
				
				this.init();
			};

			document.filemanager_{$this->id} = new filemanager(); 

JS;
        BootstrapPluginAsset::register(\Yii::$app->view);
        \Yii::$app->view->registerJS($script);
        $this->selected = [];
        if(count($this->model_db->{$this->relation_name})){
            $via_table_elements = $this->model_db->{$this->via_relation_name};
            foreach ($via_table_elements as $via_element){
                $food = Food::findOne($via_element->food_id);
                if($food === null){ return false;}
                $this->selected[] = $food->id;

                $this->selected_items_sortable[$via_element->food_id]['content'] = '<div data-id="' . $food->id . '" class="filemanager-sortable-item filemanager-sortable-item-image"><img src="' . $food->poster->thumbnails->icon['src'] . '"/> <span class="filemanagersortable-item-name">' . Html::encode($food->name) . '</span><span class="filemanager-sortable-item-remove"><i class="glyphicon glyphicon-remove"></i></span></div>';

            }
        }
        $this->selected = implode($this->delimitr, $this->selected);

    }

    /**
     * @return string|void
     */
    public function run()
    {
        $searchModel = new FoodSearch();

        $model = $searchModel->search(\Yii::$app->request->queryParams);

        $model->query->orderBy(['id' => SORT_DESC])->lang();

        return $this->render('RestaurantFoods', [
            'model'     => $model,
            'widget'    => $this,
            'form'      => $this->form,
            'selected'  => $this->selected,
            'selected_items_sortable' => $this->selected_items_sortable,
        ]);
    }

}