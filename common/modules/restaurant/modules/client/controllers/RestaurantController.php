<?php

namespace common\modules\restaurant\modules\client\controllers;

use common\modules\langs\components\Lang;
use common\modules\restaurant\models\Food;
use common\modules\restaurant\models\Region;
use Yii;
use common\modules\restaurant\models\Restaurant;
use common\modules\restaurant\models\search\RestaurantSearch;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\web\Response;

/**
 * RestaurantController implements the CRUD actions for Restaurant model.
 */
class RestaurantController extends Controller
{

    public function beforeAction($action)
    {
        $this->enableCsrfValidation = false;

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * Lists all Restaurant models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new RestaurantSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
//        $dataProvider->query->lang();

        $regions = Region::find()
          ->lang()
          ->all();

        return $this->render('@common/modules/restaurant/modules/client/views/restaurant/index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
            'regions' => $regions
        ]);
    }

    /**
     * Lists all Restaurant models.
     * @return mixed
     */
    public function actionRegion($slug)
    {
        $searchModel = new RestaurantSearch();

        $region = Region::findOne(['slug' => $slug, 'lang' => Lang::getLangId()]);

        if (!$region instanceof Region) {
            throw new NotFoundHttpException(__("Регион не найден"));
        }

        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
        $dataProvider->query->andWhere(['region_id' => $region->id]);

        $regions = Region::find()->lang()->all();

        return $this->render('@common/modules/restaurant/modules/client/views/restaurant/index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
            'regions' => $regions
        ]);
    }

    /**
     * Displays a single Restaurant model.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionShow($slug)
    {
        $model = Restaurant::find()->where(['slug' => $slug])->one();

        if (!$model instanceof Restaurant) {
            throw new NotFoundHttpException('Restaurant not found');
        }

        $restaurant_query = Restaurant::find()->where(['lang_hash' => $model->lang_hash]);
        $restaurant_query->lang();

        $restaurant = $restaurant_query->one();

        if (!$restaurant instanceof Restaurant) {
            throw new NotFoundHttpException('Restaurant not found');
        }

        $waiter = $restaurant->getWaiters()->lang()->all();

        $brandFood = Food::find()
            ->leftJoin('restaurant_foods', 'restaurant_foods.food_id=food.id')
            ->where(['restaurant_foods.restaurant_id' => $restaurant->id])
            ->andWhere(['food.type' => Food::TYPES['foods']])
            ->orderBy(['restaurant_foods.sort' => SORT_ASC])
            ->one();

        return $this->render('@common/modules/restaurant/modules/client/views/restaurant/view', [
            'model' => $restaurant,
            'waiters' => $waiter,
            'brandFood' => $brandFood
        ]);
    }

    public function actionVote() {
        $restaurant_id = \Yii::$app->request->post('id');
        $liking = \Yii::$app->request->post('like');


        \Yii::$app->response->format = Response::FORMAT_JSON;

        switch($liking) {
            case 1:
                $column = 'service_likes';
                break;
            case 2:
                $column = 'setting_likes';
                break;
            default:
                $column = 'interior_likes';
                break;
        }

        $restaurant = Restaurant::findOne($restaurant_id);

        if ($restaurant instanceof Restaurant) {
            $restaurant->updateCounters([$column => 1]);
            \Yii::$app->session->set('voted-restaurant-' . $restaurant_id, 1);
            return array(['status' => 'ok', 'message' => 'sucessfully liked']);
        }

        return array(['status' => 'error', 'message' => 'restaurant not found']);

    }

    public function actionFoods($slug, $food_type_slug) {
        $model = Restaurant::find()->where(['slug' => $slug])->one();

        if (!$model instanceof Restaurant) {
            throw new NotFoundHttpException('Restaurant not found');
        }

        $restaurant_query = Restaurant::find()->where(['lang_hash' => $model->lang_hash]);
        $restaurant_query->lang();

        $restaurant = $restaurant_query->one();
//        $foods = $restaurant->getFoods()->andWhere(['type' => Food::TYPES[$food_type_slug]])->all();
        $foods = Food::find()
            ->leftJoin('restaurant_foods', 'restaurant_foods.food_id=food.id')
            ->where(['restaurant_foods.restaurant_id' => $restaurant->id])
            ->andWhere(['food.type' => Food::TYPES[$food_type_slug]])
            ->orderBy(['restaurant_foods.sort' => SORT_ASC])
            ->all();

        return $this->render('@common/modules/restaurant/modules/client/views/restaurant/foods', [
            'model' => $restaurant,
            'foods' => $foods,
        ]);
    }

    /**
     * Finds the Restaurant model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Restaurant the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($slug)
    {
        if (($model = Restaurant::findOne(['slug' => $slug])) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }
}
